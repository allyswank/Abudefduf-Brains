setting dmc scratch directory
 
============================================================
=====         Summary of your script job               =====
============================================================
  The script file is: bowtie2
  The time limit is 60:00:00 HH:MM:SS.
  The target directory is: /home/aubars001/a-sax-rnaseq/raw-reads
  The working directory is:  /scratch-local/aubars001.BOWTIE.728988
  The memory limit is: 1gb
  The job will start running after: 2022-07-14T13:23:13
  Job Name: BOWTIE
  Virtual queue: small
  QOS: --qos=small
  Constraints: --constraint=dmc
  Using  1  cores on master node  dmc19
  Node list:  dmc19
  Nodes:  dmc19
  Command typed:
/apps/scripts/run_script bowtie2     
  Queue submit command:
sbatch --qos=small -J BOWTIE --begin=2022-07-14T13:23:13 --requeue --mail-user=ars0151@auburn.edu -o BOWTIE.o728988 -t 60:00:00 -N 1-1 -n 1 --mem-per-cpu=1000mb --constraint=dmc 
Settings:
  Output files: "Asax_index.fa.*.bt2"
  Line rate: 6 (line is 64 bytes)
  Lines per side: 1 (side is 64 bytes)
  Offset rate: 4 (one in 16)
  FTable chars: 10
  Strings: unpacked
  Max bucket size: default
  Max bucket size, sqrt multiplier: default
  Max bucket size, len divisor: 4
  Difference-cover sample period: 1024
  Endianness: little
  Actual local endianness: little
  Sanity checking: disabled
  Assertions: disabled
  Random seed: 0
  Sizeofs: void*:8, int:4, long:8, size_t:8
Input files DNA, FASTA:
  Asax_cdhit.fa
Building a SMALL index
Reading reference sizes
  Time reading reference sizes: 00:00:09
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:03
bmax according to bmaxDivN setting: 46362110
Using parameters --bmax 34771583 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 34771583 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:07
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Split 2, merged 6; iterating...
Splitting and merging
  Splitting and merging time: 00:00:01
Avg bucket size: 2.06054e+07 (target: 34771582)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 9
  Reserving size (34771583) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 18717357 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:23
Returning block of 18717358 for bucket 1
Getting block 2 of 9
  Reserving size (34771583) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 29128353 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:39
Returning block of 29128354 for bucket 2
Getting block 3 of 9
  Reserving size (34771583) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 17867897 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:23
Returning block of 17867898 for bucket 3
Getting block 4 of 9
  Reserving size (34771583) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 17282236 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:23
Returning block of 17282237 for bucket 4
Getting block 5 of 9
  Reserving size (34771583) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 21056523 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:28
Returning block of 21056524 for bucket 5
Getting block 6 of 9
  Reserving size (34771583) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 14282441 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:20
Returning block of 14282442 for bucket 6
Getting block 7 of 9
  Reserving size (34771583) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 27787234 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:37
Returning block of 27787235 for bucket 7
Getting block 8 of 9
  Reserving size (34771583) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 12039041 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:16
Returning block of 12039042 for bucket 8
Getting block 9 of 9
  Reserving size (34771583) for bucket 9
  Calculating Z arrays for bucket 9
  Entering block accumulator loop for bucket 9:
  bucket 9: 10%
  bucket 9: 20%
  bucket 9: 30%
  bucket 9: 40%
  bucket 9: 50%
  bucket 9: 60%
  bucket 9: 70%
  bucket 9: 80%
  bucket 9: 90%
  bucket 9: 100%
  Sorting block of length 27287350 for bucket 9
  (Using difference cover)
  Sorting block time: 00:00:35
Returning block of 27287351 for bucket 9
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 50478566
fchr[G]: 92726019
fchr[T]: 134623705
fchr[$]: 185448440
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 80525322 bytes to primary EBWT file: Asax_index.fa.1.bt2
Wrote 46362116 bytes to secondary EBWT file: Asax_index.fa.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 185448440
    bwtLen: 185448441
    sz: 46362110
    bwtSz: 46362111
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 11590528
    offsSz: 46362112
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 965878
    numLines: 965878
    ebwtTotLen: 61816192
    ebwtTotSz: 61816192
    color: 0
    reverse: 0
Total time for call to driver() for forward index: 00:05:47
Reading reference sizes
  Time reading reference sizes: 00:00:04
Calculating joined length
Writing header
Reserving space for joined string
Joining reference sequences
  Time to join reference sequences: 00:00:04
  Time to reverse reference sequence: 00:00:00
bmax according to bmaxDivN setting: 46362110
Using parameters --bmax 34771583 --dcv 1024
  Doing ahead-of-time memory usage test
  Passed!  Constructing with these parameters: --bmax 34771583 --dcv 1024
Constructing suffix-array element generator
Building DifferenceCoverSample
  Building sPrime
  Building sPrimeOrder
  V-Sorting samples
  V-Sorting samples time: 00:00:07
  Allocating rank array
  Ranking v-sort output
  Ranking v-sort output time: 00:00:01
  Invoking Larsson-Sadakane on ranks
  Invoking Larsson-Sadakane on ranks time: 00:00:02
  Sanity-checking and returning
Building samples
Reserving space for 12 sample suffixes
Generating random suffixes
QSorting 12 sample offsets, eliminating duplicates
QSorting sample offsets, eliminating duplicates time: 00:00:00
Multikey QSorting 12 samples
  (Using difference cover)
  Multikey QSorting samples time: 00:00:00
Calculating bucket sizes
Splitting and merging
  Splitting and merging time: 00:00:00
Avg bucket size: 2.31811e+07 (target: 34771582)
Converting suffix-array elements to index image
Allocating ftab, absorbFtab
Entering Ebwt loop
Getting block 1 of 8
  Reserving size (34771583) for bucket 1
  Calculating Z arrays for bucket 1
  Entering block accumulator loop for bucket 1:
  bucket 1: 10%
  bucket 1: 20%
  bucket 1: 30%
  bucket 1: 40%
  bucket 1: 50%
  bucket 1: 60%
  bucket 1: 70%
  bucket 1: 80%
  bucket 1: 90%
  bucket 1: 100%
  Sorting block of length 27292030 for bucket 1
  (Using difference cover)
  Sorting block time: 00:00:34
Returning block of 27292031 for bucket 1
Getting block 2 of 8
  Reserving size (34771583) for bucket 2
  Calculating Z arrays for bucket 2
  Entering block accumulator loop for bucket 2:
  bucket 2: 10%
  bucket 2: 20%
  bucket 2: 30%
  bucket 2: 40%
  bucket 2: 50%
  bucket 2: 60%
  bucket 2: 70%
  bucket 2: 80%
  bucket 2: 90%
  bucket 2: 100%
  Sorting block of length 22388361 for bucket 2
  (Using difference cover)
  Sorting block time: 00:00:29
Returning block of 22388362 for bucket 2
Getting block 3 of 8
  Reserving size (34771583) for bucket 3
  Calculating Z arrays for bucket 3
  Entering block accumulator loop for bucket 3:
  bucket 3: 10%
  bucket 3: 20%
  bucket 3: 30%
  bucket 3: 40%
  bucket 3: 50%
  bucket 3: 60%
  bucket 3: 70%
  bucket 3: 80%
  bucket 3: 90%
  bucket 3: 100%
  Sorting block of length 19625613 for bucket 3
  (Using difference cover)
  Sorting block time: 00:00:26
Returning block of 19625614 for bucket 3
Getting block 4 of 8
  Reserving size (34771583) for bucket 4
  Calculating Z arrays for bucket 4
  Entering block accumulator loop for bucket 4:
  bucket 4: 10%
  bucket 4: 20%
  bucket 4: 30%
  bucket 4: 40%
  bucket 4: 50%
  bucket 4: 60%
  bucket 4: 70%
  bucket 4: 80%
  bucket 4: 90%
  bucket 4: 100%
  Sorting block of length 22694792 for bucket 4
  (Using difference cover)
  Sorting block time: 00:00:32
Returning block of 22694793 for bucket 4
Getting block 5 of 8
  Reserving size (34771583) for bucket 5
  Calculating Z arrays for bucket 5
  Entering block accumulator loop for bucket 5:
  bucket 5: 10%
  bucket 5: 20%
  bucket 5: 30%
  bucket 5: 40%
  bucket 5: 50%
  bucket 5: 60%
  bucket 5: 70%
  bucket 5: 80%
  bucket 5: 90%
  bucket 5: 100%
  Sorting block of length 29748539 for bucket 5
  (Using difference cover)
  Sorting block time: 00:00:41
Returning block of 29748540 for bucket 5
Getting block 6 of 8
  Reserving size (34771583) for bucket 6
  Calculating Z arrays for bucket 6
  Entering block accumulator loop for bucket 6:
  bucket 6: 10%
  bucket 6: 20%
  bucket 6: 30%
  bucket 6: 40%
  bucket 6: 50%
  bucket 6: 60%
  bucket 6: 70%
  bucket 6: 80%
  bucket 6: 90%
  bucket 6: 100%
  Sorting block of length 21834877 for bucket 6
  (Using difference cover)
  Sorting block time: 00:00:28
Returning block of 21834878 for bucket 6
Getting block 7 of 8
  Reserving size (34771583) for bucket 7
  Calculating Z arrays for bucket 7
  Entering block accumulator loop for bucket 7:
  bucket 7: 10%
  bucket 7: 20%
  bucket 7: 30%
  bucket 7: 40%
  bucket 7: 50%
  bucket 7: 60%
  bucket 7: 70%
  bucket 7: 80%
  bucket 7: 90%
  bucket 7: 100%
  Sorting block of length 32311414 for bucket 7
  (Using difference cover)
  Sorting block time: 00:00:43
Returning block of 32311415 for bucket 7
Getting block 8 of 8
  Reserving size (34771583) for bucket 8
  Calculating Z arrays for bucket 8
  Entering block accumulator loop for bucket 8:
  bucket 8: 10%
  bucket 8: 20%
  bucket 8: 30%
  bucket 8: 40%
  bucket 8: 50%
  bucket 8: 60%
  bucket 8: 70%
  bucket 8: 80%
  bucket 8: 90%
  bucket 8: 100%
  Sorting block of length 9552807 for bucket 8
  (Using difference cover)
  Sorting block time: 00:00:12
Returning block of 9552808 for bucket 8
Exited Ebwt loop
fchr[A]: 0
fchr[C]: 50478566
fchr[G]: 92726019
fchr[T]: 134623705
fchr[$]: 185448440
Exiting Ebwt::buildToDisk()
Returning from initFromVector
Wrote 80525322 bytes to primary EBWT file: Asax_index.fa.rev.1.bt2
Wrote 46362116 bytes to secondary EBWT file: Asax_index.fa.rev.2.bt2
Re-opening _in1 and _in2 as input streams
Returning from Ebwt constructor
Headers:
    len: 185448440
    bwtLen: 185448441
    sz: 46362110
    bwtSz: 46362111
    lineRate: 6
    offRate: 4
    offMask: 0xfffffff0
    ftabChars: 10
    eftabLen: 20
    eftabSz: 80
    ftabLen: 1048577
    ftabSz: 4194308
    offsLen: 11590528
    offsSz: 46362112
    lineSz: 64
    sideSz: 64
    sideBwtSz: 48
    sideBwtLen: 192
    numSides: 965878
    numLines: 965878
    ebwtTotLen: 61816192
    ebwtTotSz: 61816192
    color: 0
    reverse: 1
Total time for backward call to driver() for mirror index: 00:05:31
